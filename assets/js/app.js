/**
 * AI Conversation Manager for Fatma Emotion Companion
 */

// ----------------- State Variables -----------------
let currentStep = 0;
let selectedEmoji = '';
let detectedVerbs = [];
let conversationHistory = [];
let detectedEmotions = [];
let emojiQuestionAsked = false;

// ----------------- DOM Elements -----------------
let chatContainer, userInput, emojiSelection, progressBar;
let horoscopeResult, finalEmoji, horoscopeText, verbList, userInputSection;

// ----------------- Language Text -----------------
const textContent = {
  de: {
    welcome: "Erz√§hl mir, was dich heute besch√§ftigt. Du kannst einfach drauflos schreiben.",
    emojiPrompt: "Welches Emoji beschreibt deinen aktuellen Zustand am besten?",
    thanks: "Danke, dass du das mit mir teilst.",
    horoscopeTitle: "Dein pers√∂nliches Emotions-Horoskop",
    newConversation: "Neues Gespr√§ch beginnen",
    placeholder: "Schreibe deine Antwort hier...",
    send: "Senden",
    iHear: "Ich h√∂re:",
    emotionsDetected: "Erkannte Emotionen:",
    exploreMore: "M√∂chtest du mehr dar√ºber erkunden?",
    continuePrompt: "Erz√§hl mir mehr dar√ºber..."
  },
  en: {
    welcome: "Tell me what's on your mind today. You can just write freely.",
    emojiPrompt: "Which emoji best describes your current state?",
    thanks: "Thank you for sharing that with me.",
    horoscopeTitle: "Your Personal Emotion Horoscope",
    newConversation: "Start New Conversation",
    placeholder: "Write your response here...",
    send: "Send",
    iHear: "I hear:",
    emotionsDetected: "Detected emotions:",
    exploreMore: "Would you like to explore more about this?",
    continuePrompt: "Tell me more about that..."
  },
  tr: {
    welcome: "Bug√ºn seni nelerin me≈ügul ettiƒüini anlat. Serbest√ße yazabilirsin.",
    emojiPrompt: "Hangi emoji ≈üu anki durumunuzu en iyi ≈üekilde tanƒ±mlƒ±yor?",
    thanks: "Bunu benimle payla≈ütƒ±ƒüƒ±n i√ßin te≈üekk√ºr ederim.",
    horoscopeTitle: "Ki≈üisel Duygu Burcunuz",
    newConversation: "Yeni Konu≈üma Ba≈ülat",
    placeholder: "Cevabƒ±nƒ±zƒ± buraya yazƒ±n...",
    send: "G√∂nder",
    iHear: "Duyuyorum:",
    emotionsDetected: "Tespit edilen duygular:",
    exploreMore: "Bunun hakkƒ±nda daha fazla ke≈üfetmek ister misin?",
    continuePrompt: "Bana bundan daha fazla bahset..."
  }
};

// ----------------- Initialize App -----------------
document.addEventListener('DOMContentLoaded', initializeApp);

function initializeApp() {
  // Initialize DOM elements
  chatContainer = document.getElementById('chatContainer');
  userInput = document.getElementById('userInput');
  emojiSelection = document.getElementById('emojiSelection');
  progressBar = document.getElementById('progressBar');
  horoscopeResult = document.getElementById('horoscopeResult');
  finalEmoji = document.getElementById('finalEmoji');
  horoscopeText = document.getElementById('horoscopeText');
  verbList = document.getElementById('verbList');
  userInputSection = document.getElementById('userInputSection');

  setupLanguageText();
  setupEventListeners();

  setTimeout(() => {
    addBotMessage(getText('welcome'));
  }, 500);
}

// ----------------- Language Functions -----------------
function getCurrentLanguage() {
  const lang = document.documentElement.lang?.toLowerCase().slice(0, 2) || 'de';
  const supported = ['de', 'en', 'tr'];
  return supported.includes(lang) ? lang : 'de';
}

function getText(key) {
  const lang = getCurrentLanguage();
  return textContent[lang][key] || textContent.de[key] || '';
}

function setupLanguageText() {
  if (userInput) userInput.placeholder = getText('placeholder');
  
  const sendButton = userInputSection?.querySelector('button');
  if (sendButton) sendButton.textContent = getText('send');
  
  const horoscopeTitle = document.querySelector('#horoscopeResult h2');
  if (horoscopeTitle) horoscopeTitle.textContent = getText('horoscopeTitle');
  
  const newConvButton = horoscopeResult?.querySelector('button');
  if (newConvButton) newConvButton.textContent = getText('newConversation');
}

// ----------------- Event Listeners -----------------
function setupEventListeners() {
  if (userInput) {
    userInput.addEventListener('keypress', e => {
      if (e.key === 'Enter') processUserInput();
    });
  }
}

// ----------------- Chat Functions -----------------
function addBotMessage(text) {
  if (!chatContainer) return;
  const msg = document.createElement('div');
  msg.className = 'message bot-message';
  msg.textContent = text;
  chatContainer.appendChild(msg);
  chatContainer.scrollTop = chatContainer.scrollHeight;
}

function addUserMessage(text) {
  if (!chatContainer) return;
  const msg = document.createElement('div');
  msg.className = 'message user-message';
  msg.textContent = text;
  chatContainer.appendChild(msg);
  chatContainer.scrollTop = chatContainer.scrollHeight;
}

// ----------------- Progress Bar -----------------
function updateProgress() {
  if (!progressBar) return;
  const progress = (currentStep / 5) * 100;
  progressBar.style.width = `${progress}%`;
}

// ----------------- Main Input Processing -----------------
function processUserInput() {
  if (!userInput) return;
  const text = userInput.value.trim();
  if (!text) return;

  addUserMessage(text);
  userInput.value = '';
  conversationHistory.push(text);

  // Emotionen erkennen
  detectedEmotions = detectEmotions(text);

  // Emoji-Auswahl noch nicht gemacht?
  if (!emojiQuestionAsked) {
    currentStep++;
    updateProgress();
    
    setTimeout(() => {
      addBotMessage(getText('thanks') + " " + getText('emojiPrompt'));
      emojiSelection?.classList.remove('hidden');
    }, 500);
  } else {
    // Emoji wurde bereits ausgew√§hlt - normalen Fluss fortsetzen
    currentStep++;
    updateProgress();
    
    handleConversationFlow(text);
  }
}

// ----------------- Conversation Flow -----------------
function handleConversationFlow(text) {
  console.log('Conversation Flow - Step:', currentStep);
  
  // Nach 5 Schritten immer Horoskop anzeigen
  if (currentStep >= 5) {
    setTimeout(() => {
      generateHoroscope();
    }, 800);
    return;
  }
  
  // Schritt 2: Erste Frage nach Emoji
  if (currentStep === 2) {
    setTimeout(() => {
      const question = getContextualQuestion(selectedEmoji);
      addBotMessage(question);
    }, 800);
    return;
  }
  
  // Schritt 3: Emotionserkennung und Feedback
  if (currentStep === 3) {
    setTimeout(() => {
      processEmotionDetection(text);
      // SOFORT n√§chste Frage stellen (nicht auf bestimmte Antwort warten)
      setTimeout(() => {
        const followUp = getFollowUpQuestion(selectedEmoji, detectedEmotions);
        addBotMessage(followUp);
      }, 1000);
    }, 500);
    return;
  }
  
  // Schritt 4: Vertiefende Frage
  if (currentStep === 4) {
    setTimeout(() => {
      const deepQuestion = getDeepQuestion(selectedEmoji, text);
      addBotMessage(deepQuestion);
    }, 800);
    return;
  }
}

// ----------------- Emoji Selection -----------------
function selectEmoji(emoji) {
  console.log('selectEmoji called with:', emoji);
  
  selectedEmoji = emoji;
  emojiSelection?.classList.add('hidden');
  addUserMessage(emoji);
  
  emojiQuestionAsked = true;
  currentStep = 2;
  updateProgress();
  
  // Starte Gespr√§chsfluss SOFORT nach Emoji-Auswahl
  setTimeout(() => {
    const question = getContextualQuestion(selectedEmoji);
    addBotMessage(question);
  }, 500);
}

// ----------------- Contextual Questions -----------------
function getContextualQuestion(emoji) {
  const lang = getCurrentLanguage();
  
  const contextualQuestions = {
    de: {
      "üò¥": [
        "Was w√ºrde dir helfen, zur Ruhe zu kommen?",
        "Was hat deine Energie aufgebraucht?",
        "Wie f√ºhlst du dich mit der M√ºdigkeit?",
        "Was braucht dein K√∂rper jetzt am meisten?"
      ],
      "üòä": [
        "Was genau macht dich gl√ºcklich?",
        "Wie kannst du diese Stimmung bewahren?",
        "Was hat dich heute zum L√§cheln gebracht?",
        "Wie f√ºhlst du dich in diesem Moment?"
      ],
      "üò¢": [
        "Was besch√§ftigt dein Herz?",
        "Wie f√ºhlst du dich mit dieser Traurigkeit?",
        "Was w√ºrde dir jetzt guttun?",
        "M√∂chtest du dar√ºber sprechen?"
      ],
      "üò†": [
        "Was hat diese Reaktion ausgel√∂st?",
        "Wie f√ºhlst du dich mit der Wut?",
        "Was brauchst du jetzt?",
        "Was m√∂chte ver√§ndert werden?"
      ],
      "default": [
        "Wie f√ºhlst du dich damit?",
        "Was besch√§ftigt dich dabei?",
        "Kannst du das n√§her beschreiben?",
        "Was brauchst du in dieser Situation?"
      ]
    },
    en: {
      "üò¥": [
        "What would help you find rest?",
        "What has drained your energy?",
        "How do you feel about the tiredness?",
        "What does your body need most right now?"
      ],
      "default": [
        "How do you feel about that?",
        "What's on your mind about this?",
        "Can you describe that more?",
        "What do you need in this situation?"
      ]
    }
  };
  
  const langSet = contextualQuestions[lang] || contextualQuestions.de;
  const questionSet = langSet[emoji] || langSet.default;
  return questionSet[Math.floor(Math.random() * questionSet.length)];
}

function getFollowUpQuestion(emoji, emotions) {
  const lang = getCurrentLanguage();
  
  const followUps = {
    de: {
      "üò¥": [
        "Wie wirkt sich die M√ºdigkeit auf deinen Tag aus?",
        "Was w√ºrde dir jetzt wirklich helfen?",
        "Kannst du f√ºr Erholung sorgen?",
        "Was brauchst du, um neue Energie zu tanken?"
      ],
      "default": [
        "Kannst du das n√§her beschreiben?",
        "Wie geht es dir damit?",
        "Was denkst du dar√ºber?",
        "M√∂chtest du mehr dazu sagen?"
      ]
    },
    en: {
      "default": [
        "Can you tell me more about that?",
        "How does that make you feel?",
        "What are your thoughts about this?",
        "Would you like to share more?"
      ]
    }
  };
  
  const langSet = followUps[lang] || followUps.de;
  const questionSet = langSet[emoji] || langSet.default;
  return questionSet[Math.floor(Math.random() * questionSet.length)];
}

function getDeepQuestion(emoji, previousAnswer) {
  const lang = getCurrentLanguage();
  
  const deepQuestions = {
    de: {
      "üò¥": [
        "Was k√∂nnte dir helfen, langfristig mehr Energie zu haben?",
        "Wie k√∂nntest du f√ºr bessere Erholung sorgen?",
        "Was w√ºrdest du dir f√ºr deine Erholung w√ºnschen?",
        "Welche kleinen Schritte k√∂nntest du heute gehen?"
      ],
      "default": [
        "Was hast du aus dieser Situation gelernt?",
        "Wie m√∂chtest du damit umgehen?",
        "Was w√§re ein n√§chster Schritt?",
        "Was w√ºnschst du dir f√ºr die Zukunft?"
      ]
    },
    en: {
      "default": [
        "What have you learned from this situation?",
        "How would you like to handle this?",
        "What could be a next step?",
        "What do you wish for the future?"
      ]
    }
  };
  
  const langSet = deepQuestions[lang] || deepQuestions.de;
  const questionSet = langSet[emoji] || langSet.default;
  return questionSet[Math.floor(Math.random() * questionSet.length)];
}

// ----------------- Emotion Detection & Processing -----------------
function processEmotionDetection(text) {
  const emotionData = getEmotionData();
  detectedVerbs = [];
  
  // Echte Verb-Erkennung aus emotions.js nutzen
  for (const [keyword, data] of Object.entries(emotionData.emotionKeywords)) {
    if (text.toLowerCase().includes(keyword)) {
      detectedVerbs.push(keyword);
    }
  }
  
  // Fallback: Einfache Wortanalyse
  if (detectedVerbs.length === 0) {
    const words = text.toLowerCase().split(/\s+/);
    detectedVerbs = words.filter(word => word.length > 3).slice(0, 3);
  }
  
  // Feedback geben (optional)
  let feedback = '';
  if (detectedVerbs.length > 0) {
    feedback = getText('iHear') + " " + detectedVerbs.join(', ');
  }
  
  if (detectedEmotions.length > 0) {
    const emotionNames = detectedEmotions.map(e => e.type).join(', ');
    feedback += (feedback ? "\n" : "") + getText('emotionsDetected') + " " + emotionNames;
  }
  
  if (feedback) {
    addBotMessage(feedback);
  }
}

// ----------------- Horoscope Generation -----------------
function generateHoroscope() {
  console.log('Generating horoscope at step:', currentStep);
  
  if (!horoscopeResult || !finalEmoji || !horoscopeText || !verbList) return;

  // Verstecke Eingabe-Elemente
  userInputSection?.classList.add('hidden');
  emojiSelection?.classList.add('hidden');

  // Zeige Horoskop
  horoscopeResult.classList.remove('hidden');
  finalEmoji.textContent = selectedEmoji || 'üòä';

  // Generiere Horoskop-Text
  const lang = getCurrentLanguage();
  const horoscopeMessages = {
    de: "Deine heutigen Emotionen zeigen eine tiefe Verbindung zu deinem inneren Selbst. Nimm dir Zeit, diese Gef√ºhle zu erkunden und zu verstehen.",
    en: "Your emotions today show a deep connection to your inner self. Take time to explore and understand these feelings.", 
    tr: "Bug√ºnk√º duygularƒ±nƒ±z i√ß benliƒüinizle derin bir baƒülantƒ± g√∂steriyor. Bu duygularƒ± ke≈üfetmek ve anlamak i√ßin kendinize zaman ayƒ±rƒ±n."
  };
  
  horoscopeText.textContent = horoscopeMessages[lang] || horoscopeMessages.en;

  // Zeige erkannte Verben/Emotionen
  if (detectedVerbs.length > 0) {
    const verbTitle = {
      de: "Erkannte Ausdr√ºcke:",
      en: "Detected expressions:",
      tr: "Tespit edilen ifadeler:"
    };
    
    verbList.innerHTML = `<h3>${verbTitle[lang] || verbTitle.en}</h3><ul>` +
      detectedVerbs.map(v => `<li>${v}</li>`).join('') + '</ul>';
  }

  // Scroll zum Horoskop
  horoscopeResult.scrollIntoView({ behavior: 'smooth' });
}

// ----------------- Global Functions -----------------
window.processUserInput = processUserInput;
window.selectEmoji = selectEmoji;

// Debug helper
window.getAppState = function() {
  return {
    currentStep,
    selectedEmoji, 
    emojiQuestionAsked,
    detectedVerbs,
    detectedEmotions,
    conversationHistory
  };
};
